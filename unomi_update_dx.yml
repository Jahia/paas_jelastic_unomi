---
type: update
version: 1.5.2
name: Jahia - Unomi Update DX
logo: /images/jahia-logo-70x70.png
id: jahia-unomi-update-dx
description:
  short: Jahia - Unomi Update DX
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).
globals:
  shortdomain: ${settings.shortdomain}
  package_type: dev
ssl: true
skipNodeEmails: true

# --Events --
onInstall:
  - setNGData
  - environment.control.ApplyNodeGroupData [proc, cp]:
      data:
        envLink: ${settings.unomienv}
  - allowIP
  - getUnomiDNSandPwd
  - updateDX: proc
  - updateDX: cp


onAfterServiceScaleOut[unomi]:
  forEach(event.response.nodes):
    - setupDatadogAgentPerNodeUnomi: ${@i.id}

onBeforeServiceScaleOut[unomi]: updateHazelcast
onBeforeScaleIn[unomi]: updateHazelcast


# -- Actions --
actions:
  getUnomiDNSandPwd:
    - script: |
        var resp = jelastic.env.control.GetEnvInfo('${settings.unomienv}', session)
        for (var i = 0, g = resp.nodes; i < g.length; i++) {
          if (g[i].nodeGroup == "cp") {
            var unomi_nodeid = g[i].id
            var unomi_version = g[i].version.split("-", 1)[0]
            break
          }
        }
        var cmd = "find -H /opt/ -mindepth 4  -type f -name setenv -exec awk -F'=' '$1~/ROOT_PASSWORD$/ {print $2}' {} \\;";
        var command = toJSON([{"command": cmd}]);
        var res = jelastic.env.control.ExecCmdById('${settings.unomienv}', session, unomi_nodeid, command)
        var unomi_pwd = res['responses'][0]['out'];
        return {'result': 0, 'domain': resp.env.domain, 'unomi_pwd': unomi_pwd, 'unomi_version': unomi_version}
    - setGlobals:
        unomidns: ${response.domain}
        unomi_pwd: ${response.unomi_pwd}
        unomi_version: ${response.unomi_version}

    - if('${globals.unomi_version}' == '1.3.3'):
        setGlobals:
          module_file: marketing-factory-core-1.10.4.jar
          module_url: https://store.jahia.com/cms/mavenproxy/private-app-store/org/jahia/modules/marketing-factory-core/1.10.4/marketing-factory-core-1.10.4.jar
          module_conf_file: org.jahia.modules.marketingfactory.settings-mf.cfg
    - else:
        setGlobals:
          module_file: jexperience-1.11.0.jar
          module_url: https://store.jahia.com/cms/mavenproxy/private-app-store/org/jahia/modules/jexperience/1.11.0/jexperience-1.11.0.jar
          module_conf_file: org.jahia.modules.jexperience.settings-global.cfg

  updateDX:
    - cmd[${this}]: |-
        for mod_file in marketing-factory-core-1.10.4.jar jexperience-1.11.0.jar; do
          if [ -f /data/digital-factory-data/modules/$mod_file ]; then
            rm -v /data/digital-factory-data/modules/$mod_file
          fi
        done
        for conf_file in org.jahia.modules.marketingfactory.settings-mf.cfg org.jahia.modules.jexperience.settings-global.cfg; do
          if [ -f /data/digital-factory-data/karaf/etc/$conf_file ]; then
            rm -v /data/digital-factory-data/karaf/etc/$conf_file
          fi
        done
        jcustomer_key=$(sudo cat /root/.secrets/jcustomer.key)
        if [ "${this}" == "proc" ]; then
          sed -i "s/#operatingMode/operatingMode/" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        fi
        wget -O /data/digital-factory-data/karaf/etc/${globals.module_conf_file} ${baseUrl}/common/${globals.module_conf_file}
        sed -i 's!\(\(mf\|jexperience\)\.\(unomi\|jCustomer\)URL= http://\).*!\1${globals.unomidns}!' /data/digital-factory-data/karaf/etc/${globals.module_conf_file}
        sed -i "s,^\# \(\(mf\|jexperience\)\.\(unomi\|jCustomer\)Key=\),\1${jcustomer_key}," /data/digital-factory-data/karaf/etc/${globals.module_conf_file}
        sed -i 's/\(\(mf\|jexperience\)\.\(unomi\|jCustomer\)Password=\)karaf/\1${globals.unomi_pwd}/' /data/digital-factory-data/karaf/etc/${globals.module_conf_file}
        chown tomcat:tomcat /data/digital-factory-data/karaf/etc/${globals.module_conf_file}
        wget -O /data/digital-factory-data/modules/${globals.module_file} ${globals.module_url}
        chown tomcat:tomcat /data/digital-factory-data/modules/${globals.module_file}

  setNGData:
    - script: |
        var resp = jelastic.env.control.GetNodeGroups('${settings.unomienv}', session);
        for (var i = 0, g = resp.object; i < g.length; i++) {
          if (g[i].name == 'cp' && g[i].hasOwnProperty('envLink')) {
            var actual_envLink = g[i].envLink;
            if (actual_envLink.indexOf('${env.shortdomain}') >= 0) {
              envLinkToSet = actual_envLink;
            } else {
                envLinkToSet = actual_envLink + ',' + '${env.shortdomain}';
              };
          } else {
              envLinkToSet = '${env.shortdomain}';
            };
        };
        return {'result': 0, 'envLinkToSet': envLinkToSet, 'response': resp};
    - set:
        envLinkToSet: ${response.envLinkToSet}
    - log: "## this DX appid will now be set to cp node(s) in the Unomi env: ${this.envLinkToSet}"
    - script: |
        var resp = jelastic.env.control.ApplyNodeGroupData('${settings.unomienv}', session,
          nodeGroup='cp',
          data={'envLink': '${this.envLinkToSet}'}
        );
        if (resp.result != 0) return resp;
        var new_prop = jelastic.env.control.GetNodeGroups('${settings.unomienv}', session);
          return {'result': new_prop.result, 'new_prop': new_prop};

  allowIP:
    - script: |
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
        if (resp.result != 0) return resp;
        var ipadd = [];
        for (var i = 0, n = resp.nodes; i < n.length; i++) {
          var dockername = n[i].nodeGroup;
          if (dockername == 'cp' || dockername == 'proc') {
            ipadd.push(n[i].address);
          };
          //ipadd.push(dockername);
        };
        return {"result": 0,
          "ipadd": ipadd.toString()
        };
    - setGlobals:
        ipadd_to_allow: ${response.ipadd}
    - log: "## these ip addresses should be allowed for unomi: ${globals.ipadd_to_allow}"
    - script: |
        var resp = jelastic.env.control.AddContainerEnvVars('${settings.unomienv}',
          session,
          nodeGroup='cp',
          vars={'UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES': '${globals.ipadd_to_allow}'}
        );
        if (resp.result != 0) return resp;
        return {"result": 0}
    - log: "## 'UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES=${globals.ipadd_to_allow}' set in unomi nodes"
    - script: |
        var resp = jelastic.env.control.RestartNodes('${settings.unomienv}',
          session,
          nodeGroup='cp'
        );
        if (resp.result != 0) return resp;
        return {"result": 0}
    - log: "## unomi nodes get order to restart"

# -- Settings --
settings:
  fields:
    - name: unomienv
      type: envlist
      caption: Targeted Unomi env
      required: true
      valueField: shortdomain
