---

actions:
  checkJcustomerHealth:
    cmd [${this}]: |-
      if service karaf status > /dev/null; then
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        karaf_pwd=$(grep UNOMI_ROOT_PASSWORD $setenv | cut -d"=" -f2 | sed 's,\s\+,,g')
        karaf_credentials="karaf:$karaf_pwd"
        curl -fsI /dev/null -u "$karaf_credentials" http://localhost:80/cxs/privacy/info && exit 0
      fi
      echo "[ERROR] jCustomer is unavailable, exiting" 1>&2 && exit 1
    user: root

  setupDatadogAgentUnomi:
    forEach(nodes.${this}):
      cmd[${@i.id}]: |-
        sed -i 's/\(password: \).*/\1${globals.unomi_root_password}/' /etc/datadog-agent/conf.d/jmx.d/conf.yaml
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown root:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
        systemctl restart datadog-agent


  getUnomiIPs:
    - script: |
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
        if (resp.result != 0) return resp;
        var ipadd = [];
        for (var i = 0, n = resp.nodes; i < n.length; i++) {
          var nodetype = n[i].nodeType;
          if (nodetype == 'jcustomer') {
            ipadd.push(n[i].address);
          };
        };
        return {"result": 0,
          "ipadd": ipadd.toString()
        };
    - setGlobals:
        unomi_IPs: ${response.ipadd}

  updateHazelcast:
    - getUnomiIPs
    - script: |
        var resp = jelastic.env.control.AddContainerEnvVars('${env.envName}',
          session,
          nodeGroup='cp',
          vars={'${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS': '${globals.unomi_IPs}'}
        );
        if (resp.result != 0) return resp;
        return {"result": 0}
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          sed -i "/<interface>/d" $HAZELCAST_CONFIG
          sed -i "/<member>node/d" $HAZELCAST_CONFIG
          envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          if (grep -q ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS $envfile); then
            sed 's/\(.*HAZELCAST_TCPIP_MEMBERS=\).*/\1${globals.unomi_IPs}/' -i $envfile
          else
            echo "export ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS=${globals.unomi_IPs}" >> $envfile
          fi
          sed -e '/${globals.PRONAME}_CLUSTER_PUBLIC_ADDRESS/d' \
              -e '/${globals.PRONAME}_CLUSTER_INTERNAL_ADDRESS/d' \
              -e '/${globals.PRONAME}_ROOT_PASSWORD/d' \
              -i $envfile
          echo "export ${globals.PRONAME}_CLUSTER_PUBLIC_ADDRESS=${@i.url}" >> $envfile
          echo "export ${globals.PRONAME}_CLUSTER_INTERNAL_ADDRESS=${@i.url}:9443" >> $envfile
          echo "export ${globals.PRONAME}_ROOT_PASSWORD=${globals.unomi_root_password}" >> $envfile
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during hazelcast setup."

  setupUnomi:
    - updateHazelcast
    - cmd[${nodes.cp.master.id}]:
        - systemctl enable --now karaf
      user: root
    - sleep: 20000
    - cmd[cp]:
        - systemctl enable --now karaf
      user: root

  setJournaldLimit:
    - cmd[cp]: |-
        sed -i 's/.*SystemMaxUse=.*/SystemMaxUse=200M/g' /etc/systemd/journald.conf
        systemctl restart systemd-journald.service
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during journald configuration."

  deleteEnvLink:
    script: |-
      jahia_linked = [];
      envs = jelastic.environment.control.getenvs("appstore", session)["infos"];

      for (i in envs) {
        nodeGroups = envs[i]["nodeGroups"];
        for (j in nodeGroups) {
          if (nodeGroups[j]["envLink"] == "${env.envName}") {
            jahia_linked.push(envs[i]["env"]["envName"]);
            break;
          }
        }
      }

      if (jahia_linked.length == 0) {
        return {"result": 0, "out": "No jahia linked"};
      }

      res = ""
      jahia_linked.forEach(
        function(jahiaEnvname) {
          var resp = jelastic.env.control.ApplyNodeGroupData(jahiaEnvname, session,
            nodeGroup='cp',
            data={'envLink': ''}
          );
          var resp = jelastic.env.control.ApplyNodeGroupData(jahiaEnvname, session,
            nodeGroup='proc',
            data={'envLink': ''}
          );
        }
      );
      return {"result": 0, "out": "Unlinked following environments: " + jahia_linked};
