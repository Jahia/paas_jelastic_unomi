---
type: update
version: 1.5.2
name: Unomi - Update events
logo: /images/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Unomi - Update events

globals:
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  envname: ${env.envName}
  unomi_version: ${settings.productVersion}
  package_type: dev
ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - jcustomer/jcustomer_actions.yml
  - elasticsearch/elasticsearch_actions.yml

onUninstall:
  cmd [${targetNodes.nodeGroup}]:
    - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
  user: root

onBeforeScaleIn[cp]:
  - saveUnomiRootPassword

onAfterScaleIn[cp]:
  - getUnomiRootPassword
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica

onBeforeServiceScaleOut[cp]:
  - saveUnomiRootPassword

onAfterServiceScaleOut[cp]:
  - getUnomiRootPassword
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica
  - setupDatadogAgentUnomi: cp

onBeforeRedeployContainer[cp]:
  - saveUnomiRootPassword

onAfterRedeployContainer[cp]:
  - getUnomiRootPassword
  - setReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp
  - if ('${event.params.nodeGroup.print()}' != ''):
      checkJcustomerHealthWhenStarting: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      checkJcustomerHealthWhenStarting: ${event.params.nodeId}

onAfterRedeployContainer[es]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - setupES: ${event.params.nodeGroup}
      - setupDatadogAgentEs: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - setupES: ${event.params.nodeId}
      - setupDatadogAgentEs: ${event.params.nodeId}

onAfterServiceScaleOut[es]:
  - setupES: es
  - setReplica
  - updateReplica
  - setupDatadogAgentEs: es

onAfterScaleIn[es]:
  - setupES: es
  - setReplica
  - updateReplica

onBeforeDelete:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Deleting environment $envName"
      text: "$envName is going to be deleted"
  - deleteEnvLink


onBeforeStop:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "Stopping environment $envName"
    text: "$envName is going to stop"

onAfterStart:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "$envName environment started"
    text: "$envName is started"

onBeforeMigrate:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "Migration triggered for $envName environment"
    text: "$envName going to be migrate"

onAfterMigrate:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "Environment $envName migrated"
    text: "$envName has been migrated"

onBeforeRestartNode:
  - logEvent:
      target: ${event.params.nodeId}
      title: "Restarting node ${event.params.nodeId}"
      text: "${event.params.nodeId} node is going to be restarted"
  - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
      - log: "This is an ES cluster, disable shards allocation and flush before stopping node"
      - setShardAllocation:
          target: ${event.params.nodeId}
          allocation: "primaries"
      - forceESFlush:
          target: ${event.params.nodeId}

onAfterRestartNode:
  - checkJcustomerHealthWhenStarting: ${event.params.nodeId}
  - logEvent:
      target: ${event.params.nodeId}
      title: "Node ${event.params.nodeId} restarted"
      text: "Node ${event.params.nodeId} has restarted"
  - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
      - log: "This is an ES cluster, enable shards allocation"
      - setShardAllocation:
          target: ${event.params.nodeId}
          allocation: "null"

onBeforeRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "Redeploying ${event.params.nodeGroup} nodes to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes are going to be redeploy to ${event.params.tag} version"
      - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
          - log: "This is an ES cluster, disable shards allocation and flush before stopping node"
          - setShardAllocation:
              target: ${nodes.es.master.id}
              allocation: "primaries"
          - forEach(es):
              - forceESFlush:
                  target: ${@i.id}
  - elif ('${event.params.nodeId.print()}' != ''):
      - logEvent:
          target: ${nodes.es.first.id}
          title: "Redeploying node ${event.params.nodeId} to ${event.params.tag} version"
          text: "Node ${event.params.nodeId} is going to be redeploy to ${event.params.tag} version"
      - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
          - log: "This is an ES cluster, disable shards allocation and flush before stopping node"
          - setShardAllocation:
              target: ${event.params.nodeId}
              allocation: "primaries"
          - forceESFlush:
              target: ${event.params.nodeId}

onAfterRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - getLogEventScript: ${event.params.nodeGroup}
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
      - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
          - log: "This is an ES cluster, enable shards allocation"
          - setShardAllocation:
              target: ${nodes.es.master.id}
              allocation: "null"
  - elif ('${event.params.nodeId.print()}' != ''):
      - getLogEventScript: ${event.params.nodeId}
      - logEvent:
          target: ${event.params.nodeId}
          title: "Node ${event.params.nodeId} redeployed to ${event.params.tag} version"
          text: "Node ${event.params.nodeId} has been redeploy to ${event.params.tag} version"
      - if(event.params.name == "Elasticsearch" && nodes.es.length > 1):
          - log: "This is an ES cluster, enable shards allocation"
          - setShardAllocation:
              target: ${event.params.nodeId}
              allocation: "null"

onBeforeScaleIn:
  forEach(event.response.nodes):
    logEvent:
      target: ${@i.id}
      title: "Scaling in ${event.params.nodeGroup} node group"
      text: "Node ${@i.id} is going to be removed"

onAfterServiceScaleOut:
  forEach(event.response.nodes):
    - getLogEventScript: ${@i.id}
    - logEvent:
        target: ${@i.id}
        title: "Scaled out ${event.params.nodeGroup} node group"
        text: "Node ${@i.id} has been added"
