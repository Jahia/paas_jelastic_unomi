---
type: update
version: 1.5.2
name: Jahia - Unomi
logo: /images/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Jahia - Unomi
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).

globals:
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  envname: ${env.envName}
  unomi_version: ${settings.productVersion}
  package_type: dev
  unomi_root_password: ${fn.password(20)}
ssl: true
skipNodeEmails: true

# --Events --
onUninstall:
  cmd [${targetNodes.nodeGroup}]:
    - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
  user: root

onAfterServiceScaleOut[cp]:
  - setSomeGlobals
  - forEach(event.response.nodes):
      - setReplica
  - setupDatadogAgentUnomi: cp

onBeforeServiceScaleOut[cp]:
  - setSomeGlobals
  - updateHazelcast

onBeforeScaleIn[cp]:
  - setSomeGlobals
  - updateHazelcast

onAfterRedeployContainer[cp]:
  - setSomeGlobals
  - setReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp

onAfterRedeployContainer[es]:
  - setupES
  - setupDatadogAgentEs: es

onAfterServiceScaleOut[es]:
  - setSomeGlobals
  - setupES
  - setReplica
  - updateReplica
  - setupDatadogAgentEs: es

onAfterServiceScaleIn[es]:
  - setSomeGlobals
  - setupES
  - setReplica
  - updateReplica

# -- Actions --
actions:
  setSomeGlobals:
    setGlobals:
      PRONAME: "UNOMI"

  setupDatadogAgentUnomi:
    forEach(nodes.${this}):
      cmd[${@i.id}]: |-
        sed -i 's/\(password: \).*/\1${globals.unomi_root_password}/' /etc/datadog-agent/conf.d/jmx.d/conf.yaml
        systemctl restart datadog-agent


  getUnomiIPs:
    - script: |
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
        if (resp.result != 0) return resp;
        var ipadd = [];
        for (var i = 0, n = resp.nodes; i < n.length; i++) {
          var nodetype = n[i].nodeType;
          if (nodetype == 'jcustomer') {
            ipadd.push(n[i].address);
          };
        };
        return {"result": 0,
          "ipadd": ipadd.toString()
        };
    - setGlobals:
        unomi_IPs: ${response.ipadd}


  updateReplica:
    - cmd[${nodes.es.first.id}]: |-
        curl -s http://$(hostname):9200/_cat/indices | awk -v repl=${globals.replica} '$6!=repl {print $3}' | while read index; do
            curl -s -XPUT http://$(hostname):9200/$index/_settings \
              -H "Content-Type: application/json" \
              -d '{"index":{"number_of_replicas": ${globals.replica} }}'
        done

  setReplica:
    - if(nodes.es.length > 1):
        - if(nodes.es.length > 4):
          - setGlobals:
              - replica: 2
        - else:
          - setGlobals:
              - replica: 1
    - else:
        setGlobals:
          - replica: 0
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          # test if not update needed
          actual=$(awk -F'=' '/${PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS/ {print $NF}' $setenv)
          if [ ! -z "$actual" ]; then
            if [ $actual -eq ${globals.replica} ]; then
              echo "$(hostname) already get the good replica parameters (${globals.replica})"
              exit 0
            fi
          fi
          # some cleaning in case of an update
          sed '/^export ${globals.PRONAME}_ELASTICSEARCH/d' -i $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS=${globals.replica}" >> $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_DEFAULTINDEX_REPLICAS=${globals.replica}" >> $setenv
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root

  updateHazelcast:
    - getUnomiIPs
    - script: |
        var resp = jelastic.env.control.AddContainerEnvVars('${env.envName}',
          session,
          nodeGroup='cp',
          vars={'${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS': '${globals.unomi_IPs}'}
        );
        if (resp.result != 0) return resp;
        return {"result": 0}
    - cmd[cp]: |-
        sed -i "/<interface>/d" $HAZELCAST_CONFIG
        sed -i "/<member>node/d" $HAZELCAST_CONFIG
        envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        if (grep -q ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS $envfile); then
          sed 's/\(.*HAZELCAST_TCPIP_MEMBERS=\)/\1${globals.unomi_IPs}/' -i $envfile
        else
          echo "export ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS=${globals.unomi_IPs}" >> $envfile
        fi
        echo "export ${globals.PRONAME}_CLUSTER_PUBLIC_ADDRESS=https://${HOSTNAME}" >> $envfile
        echo "export ${globals.PRONAME}_CLUSTER_INTERNAL_ADDRESS=https://${HOSTNAME}:9443" >> $envfile
        echo "export ${globals.PRONAME}_ROOT_PASSWORD=${globals.unomi_root_password}" >> $envfile
        systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during hazelcast setup."

  execdockrun:
    forEach(nodes.cp):
      api: env.control.ExecDockerRunCmd
      nodeId: ${@i.id}

  setupUnomi:
    - updateHazelcast
    - cmd[${nodes.cp.master.id}]:
        - systemctl enable --now karaf
      user: root
    - sleep: 20000
    - cmd[cp]:
        - systemctl enable --now karaf
      user: root
    # - execdockrun

  setupES:
    forEach(nodes.es):
      cmd[${@i.id}]: |-
        /usr/share/elasticsearch/bin/elasticsearch --version
        es_major_version=$(/usr/share/elasticsearch/bin/elasticsearch --version | cut -d"." -f1 | cut -d" " -f2)
        es_conf=/etc/elasticsearch/elasticsearch.yml
        ipadd=$(ip a s scope global | awk '$1=="inet" {split($2, ipad, "/"); print ipad[1]}')
        node_name=$(awk -v ipadd=$ipadd '$1==ipadd && $2~/^es_[0-9]+$/ {print $2; exit}' /etc/hosts)
        # some cleaning in case of an update
        sed -e '/^path\.repo/d' \
            -e '/^node\.name/d' \
            -e '/^discovery\.zen\./d' \
            -e '/^discovery\.seed\./d' \
            -e '/^cluster\.initial\./d' \
            -i $es_conf
        sed 's/\(^discovery.type: single-node\)/#\1/' -i $es_conf
        echo "node.name: $node_name" >> $es_conf
        hosts_list=$(awk '$2~/^es_[0-9]+$/ {nodes[$2]} END{asorti(nodes);printf "["; for(n=1;n<=length(nodes);n++){if(n<length(nodes)){sep=", "}else{sep="]"}; printf "\"%s\"%s",nodes[n],sep}}' /etc/hosts)
        discovery_hosts_parameter_name="discovery.zen.ping.unicast.hosts"
        if [ $es_major_version -ge 7 ]; then
          discovery_hosts_parameter_name="discovery.seed_hosts"
          echo "cluster.initial_master_nodes: $hosts_list" >> $es_conf
        fi
        echo "$discovery_hosts_parameter_name: $hosts_list" >> $es_conf
        echo "discovery.zen.minimum_master_nodes: $(expr ${nodes.es.length} / 2 + 1)" >> $es_conf
        systemctl enable elasticsearch
        systemctl restart elasticsearch

  setupDatadogAgentEs:
    forEach(nodes.${this}):
      cmd[${@i.id}]: |-
        echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
        sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
        echo "tags:" >> /etc/datadog-agent/datadog.yaml
        echo " - product:unomi" >> /etc/datadog-agent/datadog.yaml
        echo " - version:${UNOMI_VERSION}" >> /etc/datadog-agent/datadog.yaml
        echo " - provide:elasticsearch" >> /etc/datadog-agent/datadog.yaml
        wget -O /etc/datadog-agent/conf.d/elastic.d/conf.yaml ${baseUrl}/common/elasticsearch_dd_conf.yaml
        chmod 755 /var/log/elasticsearch/
        chmod 755 /var/log/elasticsearch/*.log -R
        echo "---" > /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "logs:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "  - type: file" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    path: /var/log/elasticsearch/*.log" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    source: elasticsearch" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    service: esDatabase" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "init_config:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "instances:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "  - url: http://${HOSTNAME}:9200" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    cluster_stats: false" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    pshard_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    index_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    pending_task_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "    tags:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        echo "      - 'role:esdatabase'" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
        wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
        wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
        chmod u+x /usr/local/bin/set_dd_tags.sh
        /usr/local/bin/set_dd_tags.sh
        systemctl restart crond datadog-agent

  setJournaldLimit:
    - cmd[cp]: |-
        sed -i 's/.*SystemMaxUse=.*/SystemMaxUse=200M/g' /etc/systemd/journald.conf
        systemctl restart systemd-journald.service
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during journald configuration."
