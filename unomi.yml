---
type: install
version: 1.5.2
name: Unomi - Install
logo: /images/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Unomi - Install
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).

globals:
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  envname: ${env.envName}
  unomi_version: ${settings.productVersion}
  package_type: dev
  unomi_root_password: ${fn.password(20)}
ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - jcustomer/jcustomer_actions.yml
  - elasticsearch/elasticsearch_actions.yml

onBeforeInstall: |
  var unomiVersion = '${settings.productVersion}'

  var resp = {
    result: 0,
    nodes: []
  }

  // Elasticsearch port and version changes from jCustomer 1.5
  if (unomiVersion >= "1.5") {
    esPort = "9200";
    esVersion = 7;
  } else {
    esPort = "9300";
    esVersion = 5;
  }

  node_es = {
    nodeType: "jahiastic-elasticsearch",
    tag: esVersion,
    displayName: "Elasticsearch v" + esVersion,
    count: ${settings.ESMode},
    cloudlets: 40,
    nodeGroup: 'es',
    isSLBAccessEnabled: false,
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${env.envName}',
      _ROLE: 'unomi',
      _PROVIDE: 'elasticsearch',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    },
    "volumes": [
      "/var/lib/elasticsearch"
    ]
  }

  node_unomi = {
    nodeType: "jcustomer",
    tag: unomiVersion,
    displayName: "Unomi v" + unomiVersion,
    count: ${settings.UnomiMode},
    cloudlets: 32,
    nodeGroup: 'cp',
    links: 'es:es',
    startServiceOnCreation: false,
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${env.envName}',
      UNOMI_HTTP_PORT: '80',
      UNOMI_ELASTICSEARCH_ADDRESSES: 'es:' + esPort,
      UNOMI_ELASTICSEARCH_CLUSTERNAME: 'jahia-dx',
      _ROLE: 'unomi',
      _PROVIDE: 'unomi',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    }
  }

  resp.nodes.push(node_unomi)
  resp.nodes.push(node_es)
  return resp

nodes: definedInOnBeforeInstall

# --Events --
onInstall:
  - if (settings.rootPassword):
      setGlobals:
        unomi_root_password: ${settings.rootPassword}
  - environment.control.ApplyNodeGroupData [cp, es]:
      data:
        productName: unomi
        productVersion: ${globals.unomi_version}
        packageType: ${globals.package_type}
  - setJournaldLimit
  - getLogEventScript: cp, es
  - env.control.AddContainerEnvVars [*]:
    vars: {"envName": "${env.envName}", "DATADOGAPIKEY": "${settings.ddogApikey}"}
  - setupES: es
  - setReplica
  - updateReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp
  - setupDatadogAgentEs: es
  - getReleaseMajorVersion
  - setEnvVersion: ${globals.envVersion}
  - checkJcustomerHealthWhenStarting: cp

onBeforeScaleIn[cp]:
  - saveUnomiRootPassword

onAfterScaleIn[cp]:
  - getUnomiRootPassword
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica

onBeforeServiceScaleOut[cp]:
  - saveUnomiRootPassword

onAfterServiceScaleOut[cp]:
  - getUnomiRootPassword
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica
  - setupDatadogAgentUnomi: cp

onBeforeRedeployContainer[cp]:
  - saveUnomiRootPassword

onBeforeRedeployContainer[es]:
  - if (nodes.es.length > 1):
      - log: "This is an ES cluster, disable shards allocation and flush before stopping node"
      - if ('${event.params.nodeGroup.print()}' != ''):
          - setShardAllocation:
              target: ${nodes.es.master.id}
              allocation: "primaries"
          - forEach(nodes.es):
              - forceESFlush:
                  target: ${@i.id}
      - elif ('${event.params.nodeId.print()}' != ''):
          - setShardAllocation:
              target: ${event.params.nodeId}
              allocation: "primaries"
          - forceESFlush:
              target: ${event.params.nodeId}

onAfterRedeployContainer[cp]:
  - getUnomiRootPassword
  - setReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp
  - if ('${event.params.nodeGroup.print()}' != ''):
      checkJcustomerHealthWhenStarting: ${event.params.nodeGroup}
  - elif ('${event.params.nodeid.print()}' != ''):
      checkJcustomerHealthWhenStarting: ${event.params.nodeid}

onAfterRedeployContainer[es]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - setupES: ${event.params.nodeGroup}
      - setupDatadogAgentEs: ${event.params.nodeGroup}
      - if (nodes.es.length > 1):
          - log: "This is an ES cluster, enable shards allocation"
          - setShardAllocation:
              target: ${nodes.es.master.id}
              allocation: "null"
  - elif ('${event.params.nodeId.print()}' != ''):
      - setupES: ${event.params.nodeId}
      - setupDatadogAgentEs: ${event.params.nodeId}
      - if (nodes.es.length > 1):
          - log: "This is an ES cluster, enable shards allocation"
          - setShardAllocation:
              target: ${event.params.nodeId}
              allocation: "null"

onAfterServiceScaleOut[es]:
  - setupES: es
  - setReplica
  - updateReplica
  - setupDatadogAgentEs: es

onAfterScaleIn[es]:
  - setupES: es
  - setReplica
  - updateReplica

onBeforeDelete:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Deleting environment $envName"
      text: "$envName is going to be deleted"
  - deleteEnvLink

onBeforeStop:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Stopping environment $envName"
      text: "$envName is going to stop"
  - setShardAllocation:
      target: ${nodes.es.master.id}
      allocation: "primaries"
  - forEach(nodes.es):
      - forceESFlush:
          target: ${@i.id}

onAfterStart:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "$envName environment started"
      text: "$envName is started"
  - setShardAllocation:
      target: ${nodes.es.master.id}
      allocation: "null"

onBeforeMigrate:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "Migration triggered for $envName environment"
    text: "$envName going to be migrate"

onAfterMigrate:
  logEvent:
    target: ${nodes.cp.first.id}
    title: "Environment $envName migrated"
    text: "$envName has been migrated"

onBeforeRestartNode[es]:
  - if (nodes.es.length > 1):
      - log: "This is an ES cluster, disable shards allocation and flush before stopping node"
      - setShardAllocation:
          target: ${event.params.nodeId}
          allocation: "primaries"
      - forceESFlush:
          target: ${event.params.nodeId}

onBeforeRestartNode:
  - logEvent:
      target: ${event.params.nodeid}
      title: "Restarting node ${event.params.nodeid}"
      text: "${event.params.nodeid} node is going to be restarted"

onAfterRestartNode[es]:
  - if (nodes.es.length > 1):
      - log: "This is an ES cluster, enable shards allocation"
      - setShardAllocation:
          target: ${event.params.nodeId}
          allocation: "null"

onAfterRestartNode[cp]:
  checkJcustomerHealthWhenStarting: ${event.params.nodeid}

onAfterRestartNode:
  - logEvent:
      target: ${event.params.nodeid}
      title: "Node ${event.params.nodeid} restarted"
      text: "Node ${event.params.nodeid} has restarted"

onBeforeRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      logEvent:
        target: ${event.params.nodeGroup}
        title: "Redeploying ${event.params.nodeGroup} nodes to ${event.params.tag} version"
        text: "${event.params.nodeGroup} nodes are going to be redeploy to ${event.params.tag} version"
  - elif ('${event.params.nodeid.print()}' != ''):
      logEvent:
        target: ${nodes.es.first.id}
        title: "Redeploying node ${event.params.nodeid} to ${event.params.tag} version"
        text: "Node ${event.params.nodeid} is going to be redeploy to ${event.params.tag} version"

onAfterRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - getLogEventScript: ${event.params.nodeGroup}
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
  - elif ('${event.params.nodeid.print()}' != ''):
      - getLogEventScript: ${event.params.nodeid}
      - logEvent:
          target: ${event.params.nodeid}
          title: "Node ${event.params.nodeid} redeployed to ${event.params.tag} version"
          text: "Node ${event.params.nodeid} has been redeploy to ${event.params.tag} version"

onBeforeScaleIn:
  forEach(event.response.nodes):
    logEvent:
      target: ${@i.id}
      title: "Scaling in ${event.params.nodeGroup} node group"
      text: "Node ${@i.id} is going to be removed"

onAfterServiceScaleOut:
  forEach(event.response.nodes):
    logEvent:
      target: ${@i.id}
      title: "Scaled out ${event.params.nodeGroup} node group"
      text: "Node ${@i.id} has been added"

settings:
  fields:
    - name: productVersion
      type: string
      caption: jCustomer Version
      required: true
    - name: UnomiMode
      type: list
      caption: jCustomer mode
      values:
        "1": single
        "2": 2 nodes cluster
        "3": 3 nodes cluster
        "4": 4 nodes cluster
        "5": 5 nodes cluster
        "6": 6 nodes cluster
        "7": 7 nodes cluster
      default: 1
    - name: ESMode
      type: list
      caption: Elasticsearch mode
      values:
        "1": single
        "3": 3 nodes cluster
        "5": 5 nodes cluster
      default: 1
    - name: mode
      type: radiolist
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
    - name: ddogApikey
      type: string
      caption: Datadog API KEY
      required: true
      vtype: text
    - name: rootPassword
      type: string
      caption: Unomi root password
