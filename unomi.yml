---
type: install
version: 1.5.2
name: Unomi - Install
logo: /images/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Unomi - Install
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).

globals:
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  envname: ${env.envName}
  unomi_version: ${settings.productVersion}
  package_type: dev
  unomi_root_password: ${fn.password(20)}
ssl: true
skipNodeEmails: true


onBeforeInstall: |
  var unomiVersion = '${settings.productVersion}'

  var resp = {
    result: 0,
    nodes: []
  }

  // Elasticsearch port and version changes from jCustomer 1.5
  if (unomiVersion >= "1.5") {
    esPort = "9200";
    esVersion = 7;
  } else {
    esPort = "9300";
    esVersion = 5;
  }

  node_es = {
    nodeType: "jahiastic-elasticsearch",
    tag: esVersion,
    displayName: "Elasticsearch v" + esVersion,
    count: ${settings.ESMode},
    cloudlets: 40,
    nodeGroup: 'es',
    isSLBAccessEnabled: false,
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${env.envName}',
      _ROLE: 'unomi',
      _PROVIDE: 'elasticsearch',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    },
    "volumes": [
      "/var/lib/elasticsearch"
    ]
  }

  node_unomi = {
    nodeType: "jcustomer",
    tag: unomiVersion,
    displayName: "Unomi v" + unomiVersion,
    count: ${settings.UnomiMode},
    cloudlets: 32,
    nodeGroup: 'cp',
    links: 'es:es',
    startServiceOnCreation: false,
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${env.envName}',
      UNOMI_HTTP_PORT: '80',
      UNOMI_ELASTICSEARCH_ADDRESSES: 'es:' + esPort,
      UNOMI_ELASTICSEARCH_CLUSTERNAME: 'jahia-dx',
      _ROLE: 'unomi',
      _PROVIDE: 'unomi',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    }
  }

  resp.nodes.push(node_unomi)
  resp.nodes.push(node_es)
  return resp

nodes: definedInOnBeforeInstall

# --Events --

onUninstall:
  cmd [${targetNodes.nodeGroup}]:
    - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
  user: root

onInstall:
  - environment.control.ApplyNodeGroupData [cp, es]:
      data:
        productName: unomi
        productVersion: ${globals.unomi_version}
        packageType: ${globals.package_type}
  - setJournaldLimit
  - setSomeGlobals
  - env.control.AddContainerEnvVars [*]:
    vars: {"envName": "${env.envName}", "DATADOGAPIKEY": "${settings.ddogApikey}"}
  - setupES: es
  - setReplica
  - updateReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp
  - setupDatadogAgentEs: es

onBeforeScaleIn[cp]:
  - saveUnomiRootPassword

onAfterScaleIn[cp]:
  - getUnomiRootPassword
  - setSomeGlobals
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica

onBeforeServiceScaleOut[cp]:
  - saveUnomiRootPassword

onAfterServiceScaleOut[cp]:
  - getUnomiRootPassword
  - setSomeGlobals
  - updateHazelcast
  - forEach(event.response.nodes):
      - setReplica
  - setupDatadogAgentUnomi: cp

onBeforeRedeployContainer[cp]:
  - saveUnomiRootPassword

onAfterRedeployContainer[cp]:
  - getUnomiRootPassword
  - setSomeGlobals
  - setReplica
  - setupUnomi
  - setupDatadogAgentUnomi: cp

onAfterRedeployContainer[es]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - setupES: ${event.params.nodeGroup}
      - setupDatadogAgentEs: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - setupES: ${event.params.nodeId}
      - setupDatadogAgentEs: ${event.params.nodeId}

onAfterServiceScaleOut[es]:
  - setSomeGlobals
  - setupES: es
  - setReplica
  - updateReplica
  - setupDatadogAgentEs: es

onAfterScaleIn[es]:
  - setSomeGlobals
  - setupES: es
  - setReplica
  - updateReplica

# -- Actions --
actions:
  saveUnomiRootPassword:
    - cmd [${nodes.cp.first.id}]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        grep UNOMI_ROOT_PASSWORD $setenv | cut -d"=" -f2 | sed 's,\s\+,,g'
    - environment.control.ApplyNodeGroupData [cp]:
        data:
          temp_unomi_root_password: ${response.out}

  getUnomiRootPassword:
    - script: |-
        nodeGroups = jelastic.environment.control.getnodegroups("${env.envName}", session)["object"];
        for (n in nodeGroups) {
          if (typeof nodeGroups[n]["temp_unomi_root_password"] !== "undefined") {
            return {"result": 0, "temp_unomi_root_password": nodeGroups[n]["temp_unomi_root_password"]}
          }
        }
    - setGlobals:
        unomi_root_password: ${response.temp_unomi_root_password}

  setSomeGlobals:
    setGlobals:
      PRONAME: "UNOMI"

  setupDatadogAgentUnomi:
    forEach(nodes.${this}):
      cmd[${@i.id}]: |-
        sed -i 's/\(password: \).*/\1${globals.unomi_root_password}/' /etc/datadog-agent/conf.d/jmx.d/conf.yaml
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown root:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
        systemctl restart datadog-agent


  getUnomiIPs:
    - script: |
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
        if (resp.result != 0) return resp;
        var ipadd = [];
        for (var i = 0, n = resp.nodes; i < n.length; i++) {
          var nodetype = n[i].nodeType;
          if (nodetype == 'jcustomer') {
            ipadd.push(n[i].address);
          };
        };
        return {"result": 0,
          "ipadd": ipadd.toString()
        };
    - setGlobals:
        unomi_IPs: ${response.ipadd}


  updateReplica:
    - cmd[${nodes.es.first.id}]: |-
        NODE_HOSTNAME=$(echo "${nodes.es.first.url}" | sed 's/^https:\/\///')
        curl -s http://${NODE_HOSTNAME}:9200/_cat/indices | awk -v repl=${globals.replica} '$6!=repl {print $3}' | while read index; do
            curl -s -XPUT http://${NODE_HOSTNAME}:9200/$index/_settings \
              -H "Content-Type: application/json" \
              -d '{"index":{"number_of_replicas": ${globals.replica} }}'
        done

  setReplica:
    - if(nodes.es.length > 1):
        - if(nodes.es.length > 4):
          - setGlobals:
              - replica: 2
        - else:
          - setGlobals:
              - replica: 1
    - else:
        setGlobals:
          - replica: 0
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          # test if not update needed
          actual=$(awk -F'=' '/${PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS/ {print $NF}' $setenv)
          if [ ! -z "$actual" ]; then
            if [ $actual -eq ${globals.replica} ]; then
              echo "$(hostname) already get the good replica parameters (${globals.replica})"
              exit 0
            fi
          fi
          # some cleaning in case of an update
          sed '/^export ${globals.PRONAME}_ELASTICSEARCH/d' -i $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS=${globals.replica}" >> $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_DEFAULTINDEX_REPLICAS=${globals.replica}" >> $setenv
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root

  updateHazelcast:
    - getUnomiIPs
    - script: |
        var resp = jelastic.env.control.AddContainerEnvVars('${env.envName}',
          session,
          nodeGroup='cp',
          vars={'${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS': '${globals.unomi_IPs}'}
        );
        if (resp.result != 0) return resp;
        return {"result": 0}
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          sed -i "/<interface>/d" $HAZELCAST_CONFIG
          sed -i "/<member>node/d" $HAZELCAST_CONFIG
          envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          if (grep -q ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS $envfile); then
            sed 's/\(.*HAZELCAST_TCPIP_MEMBERS=\).*/\1${globals.unomi_IPs}/' -i $envfile
          else
            echo "export ${globals.PRONAME}_HAZELCAST_TCPIP_MEMBERS=${globals.unomi_IPs}" >> $envfile
          fi
          sed -e '/${globals.PRONAME}_CLUSTER_PUBLIC_ADDRESS/d' \
              -e '/${globals.PRONAME}_CLUSTER_INTERNAL_ADDRESS/d' \
              -e '/${globals.PRONAME}_ROOT_PASSWORD/d' \
              -i $envfile
          echo "export ${globals.PRONAME}_CLUSTER_PUBLIC_ADDRESS=${@i.url}" >> $envfile
          echo "export ${globals.PRONAME}_CLUSTER_INTERNAL_ADDRESS=${@i.url}:9443" >> $envfile
          echo "export ${globals.PRONAME}_ROOT_PASSWORD=${globals.unomi_root_password}" >> $envfile
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during hazelcast setup."

  execdockrun:
    forEach(nodes.cp):
      api: env.control.ExecDockerRunCmd
      nodeId: ${@i.id}

  setupUnomi:
    - updateHazelcast
    - cmd[${nodes.cp.master.id}]:
        - systemctl enable --now karaf
      user: root
    - sleep: 20000
    - cmd[cp]:
        - systemctl enable --now karaf
      user: root
    # - execdockrun

  setupES:
    cmd[${this}]: |-
      /usr/share/elasticsearch/bin/elasticsearch --version
      es_major_version=$(/usr/share/elasticsearch/bin/elasticsearch --version | cut -d"." -f1 | cut -d" " -f2)
      es_conf=/etc/elasticsearch/elasticsearch.yml
      ipadd=$(ip a s scope global | awk '$1=="inet" {split($2, ipad, "/"); print ipad[1]}')
      node_name=$(awk -v ipadd=$ipadd '$1==ipadd && $2~/^es_[0-9]+$/ {print $2; exit}' /etc/hosts)
      # some cleaning in case of an update
      sed -e '/^path\.repo/d' \
          -e '/^node\.name/d' \
          -e '/^discovery\.zen\./d' \
          -e '/^discovery\.seed_/d' \
          -e '/^cluster\.initial_/d' \
          -i $es_conf
      sed 's/\(^discovery.type: single-node\)/#\1/' -i $es_conf
      echo "node.name: $node_name" >> $es_conf
      hosts_list=$(awk '$2~/^es_[0-9]+$/ {nodes[$2]} END{asorti(nodes);printf "["; for(n=1;n<=length(nodes);n++){if(n<length(nodes)){sep=", "}else{sep="]"}; printf "\"%s\"%s",nodes[n],sep}}' /etc/hosts)
      discovery_hosts_parameter_name="discovery.zen.ping.unicast.hosts"
      if [ $es_major_version -ge 7 ]; then
        discovery_hosts_parameter_name="discovery.seed_hosts"
        echo "cluster.initial_master_nodes: $hosts_list" >> $es_conf
      fi
      echo "$discovery_hosts_parameter_name: $hosts_list" >> $es_conf
      echo "discovery.zen.minimum_master_nodes: $(expr ${nodes.es.length} / 2 + 1)" >> $es_conf
      systemctl enable elasticsearch
      systemctl restart elasticsearch

  setupDatadogAgentEs:
    cmd[${this}]: |-
      NODE_HOSTNAME=$(echo "${@i.url}" | sed 's/^https:\/\///')
      chmod 755 /var/log/elasticsearch/
      chmod 755 /var/log/elasticsearch/*.log -R
      sed -i "s/\(url: http:\/\/\).*\(:.*\)/\1${NODE_HOSTNAME}\2/" /etc/datadog-agent/conf.d/elastic.d/conf.yaml
      sed -i "s/\(env:\).*\('\)/\1${PACKAGE_TYPE}\2/" /etc/datadog-agent/conf.d/elastic.d/conf.yaml
      mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
      chown root:root /var/log/jelastic-packages
      chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
      wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
      systemctl restart crond datadog-agent

  setJournaldLimit:
    - cmd[cp]: |-
        sed -i 's/.*SystemMaxUse=.*/SystemMaxUse=200M/g' /etc/systemd/journald.conf
        systemctl restart systemd-journald.service
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during journald configuration."

settings:
  fields:
    - name: productVersion
      type: string
      caption: jCustomer Version
      required: true
    - name: UnomiMode
      type: list
      caption: jCustomer mode
      values:
        "1": single
        "2": 2 nodes cluster
        "3": 3 nodes cluster
        "4": 4 nodes cluster
        "5": 5 nodes cluster
        "6": 6 nodes cluster
        "7": 7 nodes cluster
      default: 1
    - name: ESMode
      type: list
      caption: Elasticsearch mode
      values:
        "1": single
        "3": 3 nodes cluster
        "5": 5 nodes cluster
      default: 1
    - name: mode
      type: radiolist
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
    - name: ddogApikey
      type: string
      caption: Datadog API KEY
      required: true
      vtype: text
