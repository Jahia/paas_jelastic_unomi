---
type: install
version: 1.5.2
name: Jahia - Unomi
logo: /images/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Jahia - Unomi
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).
baseUrl: https://github.com/Jahia/paas_jelastic_unomi/raw/v1.5
globals:
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  unomi_version: ${settings.unomiVersion}
  es_version: 5.6.3
  package_type: dev
  # dx_version: ${settings.dxVersion}
ssl: true
skipNodeEmails: true


onBeforeInstall: |
  var matrix = {'1.3.3':'5.6.3'}
  var unomiVersion = '${settings.unomiVersion}'
  var esVersion = matrix[unomiVersion]
  var javaVersion = "jdk-1.8.0_144"
  var resp = {
    result: 0,
    nodes: []
  }

  node_es = {
    image: "jahiadev/elasticsearch:" + esVersion + "-" + javaVersion,
    displayName: "Elasticsearch v" + esVersion,
    count: 1,
    cloudlets: 40,
    nodeGroup: 'es',
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${globals.shortdomain}',
      _ROLE: 'unomi',
      _PROVIDE: 'elasticsearch',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    }
  }

  node_unomi = {
    image: "jahiadev/unomi:" + unomiVersion + "-" + javaVersion,
    displayName: "Unomi v" + unomiVersion,
    count: 1,
    cloudlets: 32,
    nodeGroup: 'cp',
    links: 'es:es',
    startServiceOnCreation: false,
    env: {
      PACKAGE_TYPE: '${globals.package_type}',
      UNOMI_VERSION: unomiVersion,
      jahia_cfg_operatingMode: '${settings.mode}',
      envName: '${globals.shortdomain}',
      UNOMI_HTTP_PORT: '80',
      UNOMI_ELASTICSEARCH_ADDRESSES: 'es:9300',
      UNOMI_ELASTICSEARCH_CLUSTERNAME: 'jahia-dx',
      _ROLE: 'unomi',
      _PROVIDE: 'unomi',
      ES_VERSION: esVersion,
      envmode: '${settings.mode}'
    }
  }

  resp.nodes.push(node_unomi)
  resp.nodes.push(node_es)
  return resp

nodes: definedInOnBeforeInstall

# --Events --

onUninstall:
  cmd [${targetNodes.nodeGroup}]:
    - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
  user: root

onInstall:
  - environment.control.ApplyNodeGroupData [cp, es]:
      data:
        productName: unomi
        productVersion: ${globals.unomi_version}
        packageType: ${globals.package_type}
  - setupUnomi
  - if ( '${settings.mode}' == 'production' ):
      - setupDatadogAgentUnomi: cp
      - setupDatadogAgentEs: es

onAfterServiceScaleOut[cp]:
  forEach(event.response.nodes):
    - setupDatadogAgentPerNodeUnomi: ${@i.id}

onBeforeServiceScaleOut[cp]: updateHazelcast
onBeforeScaleIn[cp]: updateHazelcast


# -- Actions --
actions:
  updateHazelcast:
    - cmd[cp]: |-
        sed -i "/<interface>/d" $HAZELCAST_CONFIG
        sed -i "/<member>node/d" $HAZELCAST_CONFIG
        sed -i "2i export UNOMI_CLUSTER_PUBLIC_ADDRESS=https://${HOSTNAME}" /etc/init.d/karaf-service
        sed -i "2i export UNOMI_CLUSTER_INTERNAL_ADDRESS=https://${HOSTNAME}:9443" /etc/init.d/karaf-service
        sed -i "2i export UNOMI_HAZELCAST_TCPIP_MEMBERS=unomi" /etc/init.d/karaf-service

  execdockrun:
    forEach(nodes.cp):
      api: env.control.ExecDockerRunCmd
      nodeId: ${@i.id}

  setupUnomi:
    - updateHazelcast
    - execdockrun

  setupDatadogAgentUnomi:
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - product:unomi" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${UNOMI_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${globals.shortdomain}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:unomi" >> /etc/datadog-agent/datadog.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            /usr/local/bin/set_dd_tags.sh
            systemctl restart crond datadog-agent

  setupDatadogAgentEs:
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - product:unomi" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${UNOMI_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${globals.shortdomain}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:elasticsearch" >> /etc/datadog-agent/datadog.yaml
            wget -O /etc/datadog-agent/conf.d/elastic.d/conf.yaml ${baseUrl}/common/elasticsearch_dd_conf.yaml
            chmod 755 /var/log/elasticsearch/
            chmod 755 /var/log/elasticsearch/*.log -R
            echo "---" > /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "logs:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    path: /var/log/elasticsearch/*.log" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    source: elasticsearch" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    service: esDatabase" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "init_config:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "instances:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "  - url: http://${HOSTNAME}:9200" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    cluster_stats: false" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    pshard_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    index_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    pending_task_stats: true" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "    tags:" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            echo "      - 'role:esdatabase'" >> /etc/datadog-agent/conf.d/elastic.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            /usr/local/bin/set_dd_tags.sh
            systemctl restart crond datadog-agent

  setupDatadogAgentPerNodeUnomi:
    - if (settings.mode == 'production'):
        - cmd[${this}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: unomi.${this}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - client:jahiacloud" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:unomi" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${UNOMI_VERSION}" >> /etc/datadog-agent/datadog.yaml
            systemctl restart datadog-agent

  updateDX:
    - log: "## now launching DX update package in order to install and configure MF on the DX env"
    - log: "### settings.dxenv: ${settings.dxenv}"
    - log: "### env.shortdomain: ${env.shortdomain}"
    - log: "### env.appid: ${env.appid}"
    - log: "### env.domain: ${env.domain}"
    - log: "### contexts.context: ${contexts.context}"
    - install:
        jps: ${baseUrl}/unomi_update_dx.yml?_${fn.random}
        shortdomain: ${settings.dxenv}
        # region: ${settings.envRegion}
        settings:
          shortdomain: ${settings.dxenv}
          unomidns: ${env.domain}
          mfversion: ${settings.mfversion}

settings:
  fields:
    - name: unomiVersion
      type: list
      caption: Unomi Version
      values:
        "1.3.3": 1.3.3
      default: 1.3.3
      required: true
    - name: mode
      type: radio-fieldset
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
      showIf:
        production:
          - name: ddogApikey
            type: string
            caption: Datadog API KEY
            required: true
            vtype: text
    # - name: dxenv
    #   type: envlist
    #   caption: DX env for MF installation
    #   required: true
    # - name: mfversion
    #   type: list
    #   caption: MF module version
    #   values:
    #     value1: 1.10.0
    #     value2: 1.10.1
    #     value3: 1.10.2
    #   default: 1.10.2
    #   editable: true
